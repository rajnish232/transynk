version: '3.8'

services:
  transynk-app:
    build:
      context: .
      dockerfile: Dockerfile.production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://transynk:${POSTGRES_PASSWORD}@postgres:5432/transynk
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - transynk-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=transynk
      - POSTGRES_USER=transynk
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - transynk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U transynk"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - transynk-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - transynk-app
    restart: unless-stopped
    networks:
      - transynk-network

volumes:
  postgres_data:
  redis_data:

networks:
  transynk-network:
    driver: bridge